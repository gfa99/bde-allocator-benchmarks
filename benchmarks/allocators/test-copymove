#!/bin/bash

# Tests to run ($@) must accept the following args:
#  First arg: Number Subsystems - 2^n (Total system size in 2^n bytes if < 0)
#  Second arg: Subsystem size in 2^n elements
#  Third arg:  Element size in 2^n bytes [3]
#  Fourth arg: Iteration Count for each subsystem [18]
#  Fifth arg:  Repetitions [3]
#  Sixth arg:  churnCount [1]

tests="$*"

function runtests {
    for test in $tests; do
        (set -x; time $test "$@") || exit 1
    done
}

########################################################################
# Unless otherwise specified, all parameters are expressed as exponents of 2.
# Example, a size paramter with value 4 yields 16 items.
########################################################################

# Primitive parameters
#  nS  Number of subsystems
#  sS  Subsystem size, in elements
#  sSb Subsystem size, in bytes
#  eS  Element size, in bytes
#  iC  Iteration count - accesses per element within a subsystem
#  rC  Repetition - Number of complete repetitions over all subsystems
#  cC  Churn count (shuffle factor)

# Compound "depth" parameters
#  S   System size, in bytes (nS * sS * eS)
#  W   Work per element (iC + cC + rC)

# #######################################################################
# # Test cost of access. Find where iC saturates for churn = 1.
# # Hold churnCount at 0 (i.e., 2^0 = 1)
# # Vary system size, but start big
# # Hold subsystem size constant
# # Hold element size constant
# # Vary iteration count between -1 and 10 (0 to 1024 accesses)
# # Hold repetitions to 0 (1 iteration)
# sS=9
# eS=10
# S=30
# #for (( S=32; S<=34; ++S )); do
#     for (( iC=-1; iC<=10; ++iC)); do
#         runtests -$S $sS $eS $iC 0 0
#     done
# #done
# #######################################################################

# #######################################################################
# # Test cost of churn alone (no access).
# # Hold churnCount at 2 (i.e., 2^2 == 4)
# # Hold number of elements at 25 (2^25)
# # Vary element size; Total system size with vary with element size
# # Hold access at zero except for churnCount.
# cC=0
# S=25
# for (( nS=15; nS <= 18; nS+=3 )); do
#     let "sS = S - nS"
#     for (( eS=4; eS<=10; eS+=2 )); do
#         runtests $nS $sS $eS -1 -1 $cC
#     done
# done
# #######################################################################

# #######################################################################
# # Explore two dimensions: number of accesses and system size

# # 1st dimension: number of accesses
# # Hold system size constant at 2^29 bytes
# # Hold subsystem size constant at 2^17 elements
# # Hold element size constant at 2^8
# # Hold repetitions constant at 2^0
# # Vary iteration count from 2^6 to 2^9
# # Start with one run of zero iterations to measure churn overhead
# S=29
# sS=17
# eS=8
# runtests -$S $sS $eS 0 -1 0
# for (( iC=6; iC<=9; ++iC )); do
#     runtests -$S $sS $eS $iC 0 0
# done

# # 2nd dimension: system size
# # Vary system size constant from 2^28 to 2^34 bytes by factors of 2^2
# # Hold subsystem size constant at 2^16 elements
# # Hold element size constant at 2^8
# # Hold iteration count constant at 2^7
# # Hold repetition count constant at 2^0
# sS=16
# eS=8
# iC=7
# for (( S=28; S<=34; S+=2 )); do
#     runtests -$S $sS $eS $iC 0 0
# done
# #######################################################################

# #######################################################################
# # Vary size, covering large sizes at modest acceses
# # Vary system size starting at 2^34
# # Hold subsystem size constant at 2^16 elements
# # Hold element size constant at 2^8
# # Hold iteration count constant at 2^2
# # Hold repetition count constant at 2^0
# sS=16
# eS=8
# iC=2
# for (( S=35; S<=37; ++S )); do
#     runtests -$S $sS $eS -1 -1 0
#     runtests -$S $sS $eS $iC 0 0
# done
# #######################################################################

# #######################################################################
# Test small element sizes for constructives vs. destructive cache interferance
#
# Vary number of subsystems from 2^2 to 2^22
# Hold subsystem size constant at 2^8
# Hold element size constant at 2^0
# Hold iteration count (per subsystem) at 2^0, i.e., 1 access
# Vary repetition count inversely with system size, but no less than 2^3
# Hold churn count constant at 2^0
sS=8
eS=0
iC=0
cC=0
for (( nS=2; nS<=22; ++nS )); do
    let "rC = 23 - nS"
    if (( rC < 3 )); then
        rC=3
    fi
    runtests $nS $sS $eS $iC $rC $cC
done
#######################################################################
